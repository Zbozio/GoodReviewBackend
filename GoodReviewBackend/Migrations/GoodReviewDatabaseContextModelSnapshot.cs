// <auto-generated />
using System;
using GoodReviewBackend.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GoodReviewBackend.Migrations
{
    [DbContext(typeof(GoodReviewDatabaseContext))]
    partial class GoodReviewDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DodawanieDoList", b =>
                {
                    b.Property<int>("IdKsiazka")
                        .HasColumnType("int")
                        .HasColumnName("ID_KSIAZKA");

                    b.Property<int>("IdListy")
                        .HasColumnType("int")
                        .HasColumnName("ID_LISTY");

                    b.HasKey("IdKsiazka", "IdListy");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("IdKsiazka", "IdListy"), false);

                    b.HasIndex(new[] { "IdListy" }, "DODAWANIE_DO_LIST2_FK");

                    b.HasIndex(new[] { "IdKsiazka" }, "DODAWANIE_DO_LIST_FK");

                    b.ToTable("DODAWANIE_DO_LIST", (string)null);
                });

            modelBuilder.Entity("Gatunkowosc", b =>
                {
                    b.Property<int>("IdGatunku")
                        .HasColumnType("int")
                        .HasColumnName("ID_GATUNKU");

                    b.Property<int>("IdKsiazka")
                        .HasColumnType("int")
                        .HasColumnName("ID_KSIAZKA");

                    b.HasKey("IdGatunku", "IdKsiazka");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("IdGatunku", "IdKsiazka"), false);

                    b.HasIndex(new[] { "IdKsiazka" }, "GATUNKOWOSC2_FK");

                    b.HasIndex(new[] { "IdGatunku" }, "GATUNKOWOSC_FK");

                    b.ToTable("GATUNKOWOSC", (string)null);
                });

            modelBuilder.Entity("GoodReviewBackend.Models.Autor", b =>
                {
                    b.Property<int>("IdAutora")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_AUTORA");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAutora"));

                    b.Property<DateTime?>("DataSmierci")
                        .HasColumnType("datetime")
                        .HasColumnName("DATA_SMIERCI");

                    b.Property<DateTime?>("DataUrodzenia")
                        .HasColumnType("datetime")
                        .HasColumnName("DATA_URODZENIA");

                    b.Property<string>("ImieAutora")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("IMIE_AUTORA");

                    b.Property<string>("NazwiskoAutora")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("NAZWISKO_AUTORA");

                    b.Property<string>("Opis")
                        .HasColumnType("text")
                        .HasColumnName("OPIS");

                    b.Property<string>("Pseudonim")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PSEUDONIM");

                    b.Property<int?>("Wiek")
                        .HasColumnType("int")
                        .HasColumnName("WIEK");

                    b.HasKey("IdAutora");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("IdAutora"), false);

                    b.ToTable("AUTOR", (string)null);
                });

            modelBuilder.Entity("GoodReviewBackend.Models.Gatunek", b =>
                {
                    b.Property<int>("IdGatunku")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_GATUNKU");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdGatunku"));

                    b.Property<string>("NazwaGatunku")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("NAZWA_GATUNKU");

                    b.HasKey("IdGatunku");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("IdGatunku"), false);

                    b.ToTable("GATUNEK", (string)null);
                });

            modelBuilder.Entity("GoodReviewBackend.Models.Komentarz", b =>
                {
                    b.Property<int>("IdOceny3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_OCENY3");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdOceny3"));

                    b.Property<int?>("IdRecenzji")
                        .HasColumnType("int")
                        .HasColumnName("ID_RECENZJI");

                    b.Property<int?>("IdUzytkownik")
                        .HasColumnType("int")
                        .HasColumnName("ID_UZYTKOWNIK");

                    b.Property<string>("TrescKomentarza")
                        .HasColumnType("text")
                        .HasColumnName("TRESC_KOMENTARZA");

                    b.HasKey("IdOceny3");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("IdOceny3"), false);

                    b.HasIndex(new[] { "IdRecenzji" }, "KOMENTARZE_RECENZJI_FK");

                    b.HasIndex(new[] { "IdUzytkownik" }, "KOMENTARZE_UZYTKOWNIKA_FK");

                    b.ToTable("KOMENTARZ", (string)null);
                });

            modelBuilder.Entity("GoodReviewBackend.Models.Ksiazka", b =>
                {
                    b.Property<int>("IdKsiazka")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_KSIAZKA");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdKsiazka"));

                    b.Property<int?>("IdWydawnictwa")
                        .HasColumnType("int")
                        .HasColumnName("ID_WYDAWNICTWA");

                    b.Property<int?>("IloscStron")
                        .HasColumnType("int")
                        .HasColumnName("ILOSC_STRON");

                    b.Property<string>("Isbn")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ISBN");

                    b.Property<int?>("LiczbaOcen")
                        .HasColumnType("int")
                        .HasColumnName("LICZBA_OCEN");

                    b.Property<string>("Okladka")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("OKLADKA");

                    b.Property<string>("Opis")
                        .HasColumnType("text")
                        .HasColumnName("OPIS");

                    b.Property<DateTime?>("RokWydania")
                        .HasColumnType("datetime")
                        .HasColumnName("ROK_WYDANIA");

                    b.Property<string>("Tytul")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TYTUL");

                    b.HasKey("IdKsiazka");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("IdKsiazka"), false);

                    b.HasIndex(new[] { "IdWydawnictwa" }, "WYDANE_PRZEZ_FK");

                    b.ToTable("KSIAZKA", (string)null);
                });

            modelBuilder.Entity("GoodReviewBackend.Models.Listum", b =>
                {
                    b.Property<int>("IdListy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_LISTY");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdListy"));

                    b.Property<int?>("IdUzytkownik")
                        .HasColumnType("int")
                        .HasColumnName("ID_UZYTKOWNIK");

                    b.Property<int?>("IloscElementow")
                        .HasColumnType("int")
                        .HasColumnName("ILOSC_ELEMENTOW");

                    b.Property<string>("NazwaListy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("NAZWA_LISTY");

                    b.Property<string>("OpisListy")
                        .HasColumnType("text")
                        .HasColumnName("OPIS_LISTY");

                    b.Property<bool?>("Prywatna")
                        .HasColumnType("bit")
                        .HasColumnName("PRYWATNA");

                    b.HasKey("IdListy");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("IdListy"), false);

                    b.HasIndex(new[] { "IdUzytkownik" }, "TWORZENIA_LIST_FK");

                    b.ToTable("LISTA", (string)null);
                });

            modelBuilder.Entity("GoodReviewBackend.Models.Ocena", b =>
                {
                    b.Property<int>("IdOceny")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_OCENY");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdOceny"));

                    b.Property<DateTime?>("DataOceny")
                        .HasColumnType("datetime")
                        .HasColumnName("DATA_OCENY");

                    b.Property<int?>("IdKsiazka")
                        .HasColumnType("int")
                        .HasColumnName("ID_KSIAZKA");

                    b.Property<int?>("IdUzytkownik")
                        .HasColumnType("int")
                        .HasColumnName("ID_UZYTKOWNIK");

                    b.Property<int?>("WartoscOceny")
                        .HasColumnType("int")
                        .HasColumnName("WARTOSC_OCENY");

                    b.HasKey("IdOceny");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("IdOceny"), false);

                    b.HasIndex(new[] { "IdKsiazka" }, "OCENIANIE_KSIAZEK_FK");

                    b.HasIndex(new[] { "IdUzytkownik" }, "OCENY_WYSTAWIONE_FK");

                    b.ToTable("OCENA", (string)null);
                });

            modelBuilder.Entity("GoodReviewBackend.Models.Polecenium", b =>
                {
                    b.Property<int>("IdPolecenia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_POLECENIA");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPolecenia"));

                    b.Property<DateTime?>("DataPolecenia")
                        .HasColumnType("datetime")
                        .HasColumnName("DATA_POLECENIA");

                    b.Property<int>("IdKsiazka")
                        .HasColumnType("int")
                        .HasColumnName("ID_KSIAZKA");

                    b.Property<int>("IdZnajomosci")
                        .HasColumnType("int")
                        .HasColumnName("ID_ZNAJOMOSCI");

                    b.Property<string>("TrescPolecenia")
                        .HasColumnType("text")
                        .HasColumnName("TRESC_POLECENIA");

                    b.HasKey("IdPolecenia");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("IdPolecenia"), false);

                    b.HasIndex(new[] { "IdKsiazka" }, "POLECENIE_KSIAZKI_FK");

                    b.HasIndex(new[] { "IdZnajomosci" }, "POLECENIE_ZNAJOMEMU_FK");

                    b.ToTable("POLECENIA", (string)null);
                });

            modelBuilder.Entity("GoodReviewBackend.Models.Recenzja", b =>
                {
                    b.Property<int>("IdRecenzji")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_RECENZJI");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRecenzji"));

                    b.Property<DateTime?>("DataRecenzji")
                        .HasColumnType("datetime")
                        .HasColumnName("DATA_RECENZJI");

                    b.Property<int>("IdKsiazka")
                        .HasColumnType("int")
                        .HasColumnName("ID_KSIAZKA");

                    b.Property<int>("IdUzytkownik")
                        .HasColumnType("int")
                        .HasColumnName("ID_UZYTKOWNIK");

                    b.Property<int?>("PolubieniaRecenzji")
                        .HasColumnType("int")
                        .HasColumnName("POLUBIENIA_RECENZJI");

                    b.Property<string>("TrescRecenzji")
                        .HasColumnType("text")
                        .HasColumnName("TRESC_RECENZJI");

                    b.HasKey("IdRecenzji");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("IdRecenzji"), false);

                    b.HasIndex(new[] { "IdKsiazka" }, "RECENZJE_KSIAZKI_FK");

                    b.HasIndex(new[] { "IdUzytkownik" }, "RECENZJE_UZYTKOWNIKA_FK");

                    b.ToTable("RECENZJA", (string)null);
                });

            modelBuilder.Entity("GoodReviewBackend.Models.Rola", b =>
                {
                    b.Property<int>("IdOceny2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_OCENY2");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdOceny2"));

                    b.Property<string>("NazwaRoli")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("NAZWA_ROLI");

                    b.HasKey("IdOceny2");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("IdOceny2"), false);

                    b.ToTable("ROLA", (string)null);
                });

            modelBuilder.Entity("GoodReviewBackend.Models.Status", b =>
                {
                    b.Property<int>("IdStatusu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_STATUSU");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdStatusu"));

                    b.Property<DateTime?>("DataStatusu")
                        .HasColumnType("datetime")
                        .HasColumnName("DATA_STATUSU");

                    b.Property<int?>("IdKsiazka")
                        .HasColumnType("int")
                        .HasColumnName("ID_KSIAZKA");

                    b.Property<int?>("IdStatusNazwa")
                        .HasColumnType("int")
                        .HasColumnName("ID_STATUS_NAZWA");

                    b.Property<int?>("IdUzytkownik")
                        .HasColumnType("int")
                        .HasColumnName("ID_UZYTKOWNIK");

                    b.Property<string>("KomentarzStatusu")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("KOMENTARZ_STATUSU");

                    b.HasKey("IdStatusu");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("IdStatusu"), false);

                    b.HasIndex(new[] { "IdUzytkownik" }, "STATUS_KSIAZEK_UZYTKOWNIK_FK");

                    b.HasIndex(new[] { "IdKsiazka" }, "STATUS_KSIAZKI_FK");

                    b.HasIndex(new[] { "IdStatusNazwa" }, "WYBIERANIE_STATUSU_FK");

                    b.ToTable("STATUS", (string)null);
                });

            modelBuilder.Entity("GoodReviewBackend.Models.StatusNazwa", b =>
                {
                    b.Property<int>("IdStatusNazwa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_STATUS_NAZWA");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdStatusNazwa"));

                    b.Property<string>("NazwaStatusu")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("NAZWA_STATUSU");

                    b.HasKey("IdStatusNazwa");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("IdStatusNazwa"), false);

                    b.ToTable("STATUS_NAZWA", (string)null);
                });

            modelBuilder.Entity("GoodReviewBackend.Models.Tagi", b =>
                {
                    b.Property<int>("IdOceny5")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_OCENY5");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdOceny5"));

                    b.Property<string>("NazwaTagu")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("NAZWA_TAGU");

                    b.HasKey("IdOceny5");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("IdOceny5"), false);

                    b.ToTable("TAGI", (string)null);
                });

            modelBuilder.Entity("GoodReviewBackend.Models.TypAutorstwa", b =>
                {
                    b.Property<int>("IdTypu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_TYPU");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTypu"));

                    b.Property<string>("NazwaTypu")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("NAZWA_TYPU");

                    b.HasKey("IdTypu");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("IdTypu"), false);

                    b.ToTable("TYP_AUTORSTWA", (string)null);
                });

            modelBuilder.Entity("GoodReviewBackend.Models.Udzial", b =>
                {
                    b.Property<int>("IdUdzialu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_UDZIALU");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUdzialu"));

                    b.Property<int?>("IdAutora")
                        .HasColumnType("int")
                        .HasColumnName("ID_AUTORA");

                    b.Property<int?>("IdKsiazka")
                        .HasColumnType("int")
                        .HasColumnName("ID_KSIAZKA");

                    b.Property<int?>("IdTypu")
                        .HasColumnType("int")
                        .HasColumnName("ID_TYPU");

                    b.Property<int?>("WartoscUdzialu")
                        .HasColumnType("int")
                        .HasColumnName("WARTOSC_UDZIALU");

                    b.HasKey("IdUdzialu");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("IdUdzialu"), false);

                    b.HasIndex(new[] { "IdAutora" }, "ILOSC_UDZIALU_AUTORA_FK");

                    b.HasIndex(new[] { "IdTypu" }, "TYPOWANIE_AUTORSTWA_FK");

                    b.HasIndex(new[] { "IdKsiazka" }, "UDZIAL_W_KSIAZCE_FK");

                    b.ToTable("UDZIAL", (string)null);
                });

            modelBuilder.Entity("GoodReviewBackend.Models.Wydawnictwo", b =>
                {
                    b.Property<int>("IdWydawnictwa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_WYDAWNICTWA");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdWydawnictwa"));

                    b.Property<string>("AdresSiedziby")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ADRES_SIEDZIBY");

                    b.Property<string>("Nazwa")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("NAZWA");

                    b.Property<string>("StronaInternetowa")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("STRONA_INTERNETOWA");

                    b.HasKey("IdWydawnictwa");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("IdWydawnictwa"), false);

                    b.ToTable("WYDAWNICTWO", (string)null);
                });

            modelBuilder.Entity("GoodReviewBackend.Models.Znajomi", b =>
                {
                    b.Property<int>("IdZnajomosci")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_ZNAJOMOSCI");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdZnajomosci"));

                    b.Property<DateTime?>("DataZnajomosci")
                        .HasColumnType("datetime")
                        .HasColumnName("DATA_ZNAJOMOSCI");

                    b.Property<int>("IdUzytkownik")
                        .HasColumnType("int")
                        .HasColumnName("ID_UZYTKOWNIK");

                    b.Property<string>("StatusZnajomosci")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("STATUS_ZNAJOMOSCI");

                    b.Property<int>("UzyIdUzytkownik")
                        .HasColumnType("int")
                        .HasColumnName("UZY_ID_UZYTKOWNIK");

                    b.HasKey("IdZnajomosci");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("IdZnajomosci"), false);

                    b.HasIndex(new[] { "UzyIdUzytkownik" }, "RELACJA_FK");

                    b.HasIndex(new[] { "IdUzytkownik" }, "ZNAJOMOSC_FK");

                    b.ToTable("ZNAJOMI", (string)null);
                });

            modelBuilder.Entity("HistoriaPrzegladanium", b =>
                {
                    b.Property<int>("IdKsiazka")
                        .HasColumnType("int")
                        .HasColumnName("ID_KSIAZKA");

                    b.Property<int>("IdUzytkownik")
                        .HasColumnType("int")
                        .HasColumnName("ID_UZYTKOWNIK");

                    b.HasKey("IdKsiazka", "IdUzytkownik");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("IdKsiazka", "IdUzytkownik"), false);

                    b.HasIndex(new[] { "IdUzytkownik" }, "HISTORIA_PRZEGLADANIA2_FK");

                    b.HasIndex(new[] { "IdKsiazka" }, "HISTORIA_PRZEGLADANIA_FK");

                    b.ToTable("HISTORIA_PRZEGLADANIA", (string)null);
                });

            modelBuilder.Entity("TagowanieKsiazek", b =>
                {
                    b.Property<int>("IdOceny5")
                        .HasColumnType("int")
                        .HasColumnName("ID_OCENY5");

                    b.Property<int>("IdKsiazka")
                        .HasColumnType("int")
                        .HasColumnName("ID_KSIAZKA");

                    b.HasKey("IdOceny5", "IdKsiazka");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("IdOceny5", "IdKsiazka"), false);

                    b.HasIndex(new[] { "IdKsiazka" }, "TAGOWANIE_KSIAZEK2_FK");

                    b.HasIndex(new[] { "IdOceny5" }, "TAGOWANIE_KSIAZEK_FK");

                    b.ToTable("TAGOWANIE_KSIAZEK", (string)null);
                });

            modelBuilder.Entity("UlubioneGatunki", b =>
                {
                    b.Property<int>("IdGatunku")
                        .HasColumnType("int")
                        .HasColumnName("ID_GATUNKU");

                    b.Property<int>("IdUzytkownik")
                        .HasColumnType("int")
                        .HasColumnName("ID_UZYTKOWNIK");

                    b.HasKey("IdGatunku", "IdUzytkownik");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("IdGatunku", "IdUzytkownik"), false);

                    b.HasIndex(new[] { "IdUzytkownik" }, "ULUBIONE_GATUNKI2_FK");

                    b.HasIndex(new[] { "IdGatunku" }, "ULUBIONE_GATUNKI_FK");

                    b.ToTable("ULUBIONE_GATUNKI", (string)null);
                });

            modelBuilder.Entity("Uzytkownik", b =>
                {
                    b.Property<int>("IdUzytkownik")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_UZYTKOWNIK");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUzytkownik"));

                    b.Property<DateTime?>("DataRejestracji")
                        .HasColumnType("datetime")
                        .HasColumnName("DATA_REJESTRACJI");

                    b.Property<DateTime?>("DataUrodzenia")
                        .HasColumnType("datetime2");

                    b.Property<string>("EMail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("E_MAIL");

                    b.Property<string>("Haslo")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("HASLO");

                    b.Property<int?>("IdOceny2")
                        .HasColumnType("int")
                        .HasColumnName("ID_OCENY2");

                    b.Property<int?>("IloscOcen")
                        .HasColumnType("int")
                        .HasColumnName("ILOSC_OCEN");

                    b.Property<int?>("IloscRecenzji")
                        .HasColumnType("int")
                        .HasColumnName("ILOSC_RECENZJI");

                    b.Property<string>("Imie")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("IMIE");

                    b.Property<string>("Nazwisko")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NAZWISKO");

                    b.Property<string>("Opis")
                        .HasColumnType("text")
                        .HasColumnName("OPIS");

                    b.Property<DateTime?>("OstaniaAktywnosc")
                        .HasColumnType("datetime")
                        .HasColumnName("OSTANIA_AKTYWNOSC");

                    b.Property<string>("Zdjecie")
                        .HasColumnType("text")
                        .HasColumnName("ZDJECIE");

                    b.Property<int?>("Znajomi")
                        .HasColumnType("int")
                        .HasColumnName("ZNAJOMI");

                    b.HasKey("IdUzytkownik");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("IdUzytkownik"), false);

                    b.HasIndex(new[] { "IdOceny2" }, "ROLA_UZYTKOWNIKA_FK");

                    b.ToTable("UZYTKOWNIK", (string)null);
                });

            modelBuilder.Entity("DodawanieDoList", b =>
                {
                    b.HasOne("GoodReviewBackend.Models.Ksiazka", null)
                        .WithMany()
                        .HasForeignKey("IdKsiazka")
                        .IsRequired()
                        .HasConstraintName("FK_DODAWANI_DODAWANIE_KSIAZKA");

                    b.HasOne("GoodReviewBackend.Models.Listum", null)
                        .WithMany()
                        .HasForeignKey("IdListy")
                        .IsRequired()
                        .HasConstraintName("FK_DODAWANI_DODAWANIE_LISTA");
                });

            modelBuilder.Entity("Gatunkowosc", b =>
                {
                    b.HasOne("GoodReviewBackend.Models.Gatunek", null)
                        .WithMany()
                        .HasForeignKey("IdGatunku")
                        .IsRequired()
                        .HasConstraintName("FK_GATUNKOW_GATUNKOWO_GATUNEK");

                    b.HasOne("GoodReviewBackend.Models.Ksiazka", null)
                        .WithMany()
                        .HasForeignKey("IdKsiazka")
                        .IsRequired()
                        .HasConstraintName("FK_GATUNKOW_GATUNKOWO_KSIAZKA");
                });

            modelBuilder.Entity("GoodReviewBackend.Models.Komentarz", b =>
                {
                    b.HasOne("GoodReviewBackend.Models.Recenzja", "IdRecenzjiNavigation")
                        .WithMany("Komentarzs")
                        .HasForeignKey("IdRecenzji")
                        .HasConstraintName("FK_KOMENTAR_KOMENTARZ_RECENZJA");

                    b.HasOne("Uzytkownik", "IdUzytkownikNavigation")
                        .WithMany("Komentarzs")
                        .HasForeignKey("IdUzytkownik")
                        .HasConstraintName("FK_KOMENTAR_KOMENTARZ_UZYTKOWN");

                    b.Navigation("IdRecenzjiNavigation");

                    b.Navigation("IdUzytkownikNavigation");
                });

            modelBuilder.Entity("GoodReviewBackend.Models.Ksiazka", b =>
                {
                    b.HasOne("GoodReviewBackend.Models.Wydawnictwo", "IdWydawnictwaNavigation")
                        .WithMany("Ksiazkas")
                        .HasForeignKey("IdWydawnictwa")
                        .HasConstraintName("FK_KSIAZKA_WYDANE_PR_WYDAWNIC");

                    b.Navigation("IdWydawnictwaNavigation");
                });

            modelBuilder.Entity("GoodReviewBackend.Models.Listum", b =>
                {
                    b.HasOne("Uzytkownik", "IdUzytkownikNavigation")
                        .WithMany("Lista")
                        .HasForeignKey("IdUzytkownik")
                        .HasConstraintName("FK_LISTA_TWORZENIA_UZYTKOWN");

                    b.Navigation("IdUzytkownikNavigation");
                });

            modelBuilder.Entity("GoodReviewBackend.Models.Ocena", b =>
                {
                    b.HasOne("GoodReviewBackend.Models.Ksiazka", "IdKsiazkaNavigation")
                        .WithMany("Ocenas")
                        .HasForeignKey("IdKsiazka")
                        .HasConstraintName("FK_OCENA_OCENIANIE_KSIAZKA");

                    b.HasOne("Uzytkownik", "IdUzytkownikNavigation")
                        .WithMany("Ocenas")
                        .HasForeignKey("IdUzytkownik")
                        .HasConstraintName("FK_OCENA_OCENY_WYS_UZYTKOWN");

                    b.Navigation("IdKsiazkaNavigation");

                    b.Navigation("IdUzytkownikNavigation");
                });

            modelBuilder.Entity("GoodReviewBackend.Models.Polecenium", b =>
                {
                    b.HasOne("GoodReviewBackend.Models.Ksiazka", "IdKsiazkaNavigation")
                        .WithMany("Polecenia")
                        .HasForeignKey("IdKsiazka")
                        .IsRequired()
                        .HasConstraintName("FK_POLECENI_POLECENIE_KSIAZKA");

                    b.HasOne("GoodReviewBackend.Models.Znajomi", "IdZnajomosciNavigation")
                        .WithMany("Polecenia")
                        .HasForeignKey("IdZnajomosci")
                        .IsRequired()
                        .HasConstraintName("FK_POLECENI_POLECENIE_ZNAJOMI");

                    b.Navigation("IdKsiazkaNavigation");

                    b.Navigation("IdZnajomosciNavigation");
                });

            modelBuilder.Entity("GoodReviewBackend.Models.Recenzja", b =>
                {
                    b.HasOne("GoodReviewBackend.Models.Ksiazka", "IdKsiazkaNavigation")
                        .WithMany("Recenzjas")
                        .HasForeignKey("IdKsiazka")
                        .IsRequired()
                        .HasConstraintName("FK_RECENZJA_RECENZJE__KSIAZKA");

                    b.HasOne("Uzytkownik", "IdUzytkownikNavigation")
                        .WithMany("Recenzjas")
                        .HasForeignKey("IdUzytkownik")
                        .IsRequired()
                        .HasConstraintName("FK_RECENZJA_RECENZJE__UZYTKOWN");

                    b.Navigation("IdKsiazkaNavigation");

                    b.Navigation("IdUzytkownikNavigation");
                });

            modelBuilder.Entity("GoodReviewBackend.Models.Status", b =>
                {
                    b.HasOne("GoodReviewBackend.Models.Ksiazka", "IdKsiazkaNavigation")
                        .WithMany("Statuses")
                        .HasForeignKey("IdKsiazka")
                        .HasConstraintName("FK_STATUS_STATUS_KS_KSIAZKA");

                    b.HasOne("GoodReviewBackend.Models.StatusNazwa", "IdStatusNazwaNavigation")
                        .WithMany("Statuses")
                        .HasForeignKey("IdStatusNazwa")
                        .HasConstraintName("FK_STATUS_WYBIERANI_STATUS_N");

                    b.HasOne("Uzytkownik", "IdUzytkownikNavigation")
                        .WithMany("Statuses")
                        .HasForeignKey("IdUzytkownik")
                        .HasConstraintName("FK_STATUS_STATUS_KS_UZYTKOWN");

                    b.Navigation("IdKsiazkaNavigation");

                    b.Navigation("IdStatusNazwaNavigation");

                    b.Navigation("IdUzytkownikNavigation");
                });

            modelBuilder.Entity("GoodReviewBackend.Models.Udzial", b =>
                {
                    b.HasOne("GoodReviewBackend.Models.Autor", "IdAutoraNavigation")
                        .WithMany("Udzials")
                        .HasForeignKey("IdAutora")
                        .HasConstraintName("FK_UDZIAL_ILOSC_UDZ_AUTOR");

                    b.HasOne("GoodReviewBackend.Models.Ksiazka", "IdKsiazkaNavigation")
                        .WithMany("Udzials")
                        .HasForeignKey("IdKsiazka")
                        .HasConstraintName("FK_UDZIAL_UDZIAL_W__KSIAZKA");

                    b.HasOne("GoodReviewBackend.Models.TypAutorstwa", "IdTypuNavigation")
                        .WithMany("Udzials")
                        .HasForeignKey("IdTypu")
                        .HasConstraintName("FK_UDZIAL_TYPOWANIE_TYP_AUTO");

                    b.Navigation("IdAutoraNavigation");

                    b.Navigation("IdKsiazkaNavigation");

                    b.Navigation("IdTypuNavigation");
                });

            modelBuilder.Entity("GoodReviewBackend.Models.Znajomi", b =>
                {
                    b.HasOne("Uzytkownik", "IdUzytkownikNavigation")
                        .WithMany("ZnajomiIdUzytkownikNavigations")
                        .HasForeignKey("IdUzytkownik")
                        .IsRequired()
                        .HasConstraintName("FK_ZNAJOMI_ZNAJOMOSC_UZYTKOWN");

                    b.HasOne("Uzytkownik", "UzyIdUzytkownikNavigation")
                        .WithMany("ZnajomiUzyIdUzytkownikNavigations")
                        .HasForeignKey("UzyIdUzytkownik")
                        .IsRequired()
                        .HasConstraintName("FK_ZNAJOMI_RELACJA_UZYTKOWN");

                    b.Navigation("IdUzytkownikNavigation");

                    b.Navigation("UzyIdUzytkownikNavigation");
                });

            modelBuilder.Entity("HistoriaPrzegladanium", b =>
                {
                    b.HasOne("GoodReviewBackend.Models.Ksiazka", null)
                        .WithMany()
                        .HasForeignKey("IdKsiazka")
                        .IsRequired()
                        .HasConstraintName("FK_HISTORIA_HISTORIA__KSIAZKA");

                    b.HasOne("Uzytkownik", null)
                        .WithMany()
                        .HasForeignKey("IdUzytkownik")
                        .IsRequired()
                        .HasConstraintName("FK_HISTORIA_HISTORIA__UZYTKOWN");
                });

            modelBuilder.Entity("TagowanieKsiazek", b =>
                {
                    b.HasOne("GoodReviewBackend.Models.Ksiazka", null)
                        .WithMany()
                        .HasForeignKey("IdKsiazka")
                        .IsRequired()
                        .HasConstraintName("FK_TAGOWANI_TAGOWANIE_KSIAZKA");

                    b.HasOne("GoodReviewBackend.Models.Tagi", null)
                        .WithMany()
                        .HasForeignKey("IdOceny5")
                        .IsRequired()
                        .HasConstraintName("FK_TAGOWANI_TAGOWANIE_TAGI");
                });

            modelBuilder.Entity("UlubioneGatunki", b =>
                {
                    b.HasOne("GoodReviewBackend.Models.Gatunek", null)
                        .WithMany()
                        .HasForeignKey("IdGatunku")
                        .IsRequired()
                        .HasConstraintName("FK_ULUBIONE_ULUBIONE__GATUNEK");

                    b.HasOne("Uzytkownik", null)
                        .WithMany()
                        .HasForeignKey("IdUzytkownik")
                        .IsRequired()
                        .HasConstraintName("FK_ULUBIONE_ULUBIONE__UZYTKOWN");
                });

            modelBuilder.Entity("Uzytkownik", b =>
                {
                    b.HasOne("GoodReviewBackend.Models.Rola", "IdOceny2Navigation")
                        .WithMany("Uzytkowniks")
                        .HasForeignKey("IdOceny2")
                        .HasConstraintName("FK_UZYTKOWN_ROLA_UZYT_ROLA");

                    b.Navigation("IdOceny2Navigation");
                });

            modelBuilder.Entity("GoodReviewBackend.Models.Autor", b =>
                {
                    b.Navigation("Udzials");
                });

            modelBuilder.Entity("GoodReviewBackend.Models.Ksiazka", b =>
                {
                    b.Navigation("Ocenas");

                    b.Navigation("Polecenia");

                    b.Navigation("Recenzjas");

                    b.Navigation("Statuses");

                    b.Navigation("Udzials");
                });

            modelBuilder.Entity("GoodReviewBackend.Models.Recenzja", b =>
                {
                    b.Navigation("Komentarzs");
                });

            modelBuilder.Entity("GoodReviewBackend.Models.Rola", b =>
                {
                    b.Navigation("Uzytkowniks");
                });

            modelBuilder.Entity("GoodReviewBackend.Models.StatusNazwa", b =>
                {
                    b.Navigation("Statuses");
                });

            modelBuilder.Entity("GoodReviewBackend.Models.TypAutorstwa", b =>
                {
                    b.Navigation("Udzials");
                });

            modelBuilder.Entity("GoodReviewBackend.Models.Wydawnictwo", b =>
                {
                    b.Navigation("Ksiazkas");
                });

            modelBuilder.Entity("GoodReviewBackend.Models.Znajomi", b =>
                {
                    b.Navigation("Polecenia");
                });

            modelBuilder.Entity("Uzytkownik", b =>
                {
                    b.Navigation("Komentarzs");

                    b.Navigation("Lista");

                    b.Navigation("Ocenas");

                    b.Navigation("Recenzjas");

                    b.Navigation("Statuses");

                    b.Navigation("ZnajomiIdUzytkownikNavigations");

                    b.Navigation("ZnajomiUzyIdUzytkownikNavigations");
                });
#pragma warning restore 612, 618
        }
    }
}
